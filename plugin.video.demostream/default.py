import sys
import os
import urllib.parse
import xbmc
import xbmcvfs
import xbmcgui
import xbmcplugin
import json
import xbmcaddon
import urllib.request
import re
import hashlib
from datetime import datetime, timedelta
from md5crypt import md5crypt
import xml.etree.ElementTree as ET

addon_dir = os.path.dirname(__file__)
sys.path.append(os.path.join(addon_dir, 'resources', 'lib', 'python'))

from bson import ObjectId
from urllib.parse import parse_qsl
from urllib import request, parse
from tmdb.searchTMDBMulti import search_movie_tmdb
from resources.lib.webshare_client import WebshareClient
from resources.lib.csfd_client import fetch_csfd_tip_titles
from redis_cache import redis_cache
from resources.lib import mongo_api

try:
    from xbmc import translatePath
except ImportError:
    from xbmcvfs import translatePath

# Naƒç√≠tanie nastaven√≠ doplnku
addon = xbmcaddon.Addon()
webshare_user = addon.getSetting("webshare_user")
webshare_pass = addon.getSetting("webshare_pass")

# Skontroluj ch√Ωbaj√∫ce
missing_settings = []
if not webshare_user: missing_settings.append("Webshare - pou≈æ√≠vateƒæ")
if not webshare_pass: missing_settings.append("Webshare - heslo")

if missing_settings:
    xbmcgui.Dialog().ok(
        "Ch√Ωbaj√∫ce nastavenia",
        "Niektor√© √∫daje nie s√∫ vyplnen√©:\n" + "\n".join(missing_settings) +
        "\n\nOtvor√≠me nastavenia doplnku."
    )
    addon.openSettings()
    xbmcplugin.endOfDirectory(int(sys.argv[1]), succeeded=True)
    sys.exit()

# Z√°kladn√© premenn√©
ADDON_HANDLE = int(sys.argv[1])
BASE_URL = sys.argv[0]
ARGS = urllib.parse.parse_qs(sys.argv[2][1:])

profile_dir = translatePath(addon.getAddonInfo('profile'))
STORAGE_DIR = os.path.join(profile_dir, 'store')
SEARCH_HISTORY_FILE = os.path.join(STORAGE_DIR, 'search_terms.json')
MOVIE_HISTORY_FILE = os.path.join(STORAGE_DIR, 'movie_history.json')
SERIE_HISTORY_FILE = os.path.join(STORAGE_DIR, 'serie_history.json')
WATCH_LATER_FILE = os.path.join(STORAGE_DIR, 'watch_later.json')
PER_PAGE = addon.getSettingInt("per_page") or 20

# Priorita rozl√≠≈°en√≠
resolution_order = {
    "4K": 5,
    "FHD": 4,
    "HD": 3,
    "SD": 2,
    "480p": 1
}

# Pomocn√° funkcia na z√≠skanie kolekcie - u≈æ nie je potrebn√°
# def get_collection(collection_name):
#     return db[collection_name]

def get_ws():
    global ws
    if 'ws' not in globals():
        from resources.lib.webshare_client import WebshareClient
        ws = WebshareClient()
    return ws

# Naƒç√≠tanie ≈æ√°nrov z datab√°zy
_genre_dict_cache = None
def get_genre_dict():
    global _genre_dict_cache
    if _genre_dict_cache is None:
        _genre_dict_cache = {
            str(g["id"]): g["name"]
            for g in mongo_api.get_items("movie_genres")
        }
    return _genre_dict_cache

# Vytvorenie √∫lo≈æn√©ho prieƒçinka
os.makedirs(STORAGE_DIR, exist_ok=True)

def format_time(seconds):
    mins, secs = divmod(int(seconds), 60)
    return f"{mins}:{secs:02d}"

def create_list_item_legacy(title, plot, year, thumb_url, extra_info={}):
    li = xbmcgui.ListItem(label=title)
    info = {
        "title": title,
        "plot": plot,
        "year": int(year) if str(year).isdigit() else None,
        "mediatype": "episode"
    }
    info.update(extra_info)
    li.setInfo("video", info)
    li.setArt({'thumb': thumb_url, 'poster': thumb_url, 'fanart': thumb_url})
    li.setProperty("IsPlayable", "true")
    return li

def create_list_item_modern(title, plot, year, thumb_url, extra_info={}):
    li = xbmcgui.ListItem(label=title)
    try:
        tag = li.getVideoInfoTag()
        tag.setTitle(title)
        tag.setPlot(plot)
        if str(year).isdigit():
            tag.setYear(int(year))
        tag.setMediaType("episode")
    except Exception as e:
        xbmc.log(f"[SC3] Fallback InfoTag: {e}", xbmc.LOGDEBUG)
        li.setInfo("video", {
            "title": title,
            "plot": plot,
            "year": int(year) if str(year).isdigit() else None,
            "mediatype": "episode"
        })
    li.setArt({'thumb': thumb_url, 'poster': thumb_url, 'fanart': thumb_url})
    li.setProperty("IsPlayable", "true")
    return li

def create_compatible_list_item(title, plot, year, thumb_url, extra_info={}):
    try:
        kodi_major = int(xbmc.getInfoLabel("System.BuildVersion").split(".")[0])
    except:
        kodi_major = 18
    if kodi_major >= 20:
        return create_list_item_modern(title, plot, year, thumb_url, extra_info)
    else:
        return create_list_item_legacy(title, plot, year, thumb_url, extra_info)

def create_listitem_with_context(label, info, art, url, is_folder, context_items=None):
    li = xbmcgui.ListItem(label=label)
    li.setInfo('video', info)
    li.setArt(art)
    if context_items:
        li.addContextMenuItems(context_items)
    xbmcplugin.addDirectoryItem(handle=ADDON_HANDLE, url=url, listitem=li, isFolder=is_folder)

def load_watch_later():
    if not os.path.exists(WATCH_LATER_FILE):
        return []
    with open(WATCH_LATER_FILE, 'r', encoding='utf-8') as f:
        try:
            return json.load(f)
        except json.JSONDecodeError:
            return []

def save_watch_later(items):
    with open(WATCH_LATER_FILE, 'w', encoding='utf-8') as f:
        json.dump(items, f, indent=2)

def add_to_watch_later(item_type, item_id):
    items = load_watch_later()
    if any(i for i in items if i['type'] == item_type and i['id'] == item_id):
        return  # already exists
    items.append({'type': item_type, 'id': item_id})
    save_watch_later(items)
    xbmcgui.Dialog().notification("Pridan√©", "Pridan√© do 'Pozrie≈• si nesk√¥r'", xbmcgui.NOTIFICATION_INFO)

def remove_from_watch_later(item_type, item_id):
    items = load_watch_later()
    items = [i for i in items if not (i['type'] == item_type and i['id'] == item_id)]
    save_watch_later(items)
    xbmcgui.Dialog().notification("Odstr√°nen√©", "Odstr√°nen√© zo zoznamu", xbmcgui.NOTIFICATION_INFO)
    xbmc.executebuiltin("Container.Refresh")

#-------- Pridanie polo≈æky do zoznamu pre movies --------
def add_movie_listitem(movie, addon_handle, context_items=None):
    title = movie.get("title")
    year = movie.get("year")
    movie_id = movie.get("movieId")
    poster_url = movie.get("posterUrl")
    overview = movie.get("overview", "≈Ωiadny popis k dispoz√≠cii.")
    vote = movie.get("vote_average")
    release_date = movie.get("release_date")
    stream_languages = movie.get("stream_audio")

    url = build_url({'action': 'select_stream', 'movieId': movie_id})

    languages_str = f" [COLOR deepskyblue]{stream_languages}[/COLOR]"

    # ‚ùó Z√≠skanie ≈æ√°nrov zo zoznamu ID
    genre_names = [get_genre_dict().get(str(gid), f"≈Ω√°ner {gid}") for gid in movie.get("genres", [])]

    # Form√°tovan√Ω label
    label = f"[B]{title}[/B]"
    if year:
        label += f" [COLOR grey]({year})[/COLOR]"
    if vote:
        label += f" [COLOR gold]{vote:.1f}‚òÖ[/COLOR]"
    label += languages_str

    # Video info
    info = {
        'title': title,
        'year': int(year) if year and str(year).isdigit() else None,
        'plot': overview,
        'rating': float(vote) if vote else None,
        'premiered': release_date if release_date else None,
        'genre': ", ".join(genre_names) if genre_names else None
    }

    li = xbmcgui.ListItem(label=label)
    li.setInfo('video', info)
    # Poster / Fanart / Thumb
    art = {
        'thumb': poster_url or 'DefaultVideo.png',
        'poster': poster_url or 'DefaultVideo.png',
        'fanart': poster_url or 'DefaultVideo.png'
    }
    li.setArt(art)
    li.setProperty('movie_id', str(movie_id))
    li.setProperty('IsPlayable', 'true')
    
    # üü† Pridaj automaticky kontextov√© menu, ak nie je zadan√©
    if context_items is None:
        context_items = [(
            "Pozrie≈• si nesk√¥r ...",
            f'RunPlugin({build_url({"action": "add_watch_later", "type": "movie", "id": movie_id})})'
        )]
    if context_items:
        li.addContextMenuItems(context_items)
        
    xbmcplugin.addDirectoryItem(handle=addon_handle, url=url, listitem=li, isFolder=False)

#-------- Pridanie polo≈æky do zoznamu pre seri√°ly --------
def add_series_listitem(series, addon_handle, context_items=None):
    title = series.get("title", "Nezn√°my n√°zov")
    first_air_date = series.get("first_air_date")  # oƒçak√°vame rok ako int alebo string
    last_air_date = series.get("last_air_date")
    serie_id = series.get("serieId")
    poster_url = series.get("posterUrl")
    overview = series.get("overview", "≈Ωiadny popis k dispoz√≠cii.")

    url = build_url({'action': 'list_seasons', 'serieId': serie_id})

    # Form√°tovanie rokov
    year_label = ""
    try:
        # Pok√∫sime sa z√≠ska≈• len rok (4 ƒç√≠slice) z d√°tumu, ak je to string, alebo pou≈æi≈• priamo int
        def extract_year(value):
            if value is None:
                return None
            if isinstance(value, int):
                return value
            if isinstance(value, str):
                # napr. '2021-09-15' alebo len '2021'
                return int(value[:4])
            return None

        first_year = extract_year(first_air_date)
        last_year = extract_year(last_air_date)

        if first_year and last_year:
            if first_year == last_year:
                year_label = f"{first_year}"
            else:
                year_label = f"{first_year} - {last_year}"
        elif first_year:
            year_label = f"{first_year}"
        elif last_year:
            year_label = f"{last_year}"
    except Exception:
        year_label = ""

    # Form√°tovan√Ω label
    label = f"[B]{title}[/B]"
    if year_label:
        label += f" [COLOR grey]({year_label})[/COLOR]"

    li = xbmcgui.ListItem(label=label)
    li.setInfo('video', {
        'title': title,
        'year': first_year or last_year,  # pre metadata staƒç√≠ jeden rok
        'plot': overview,
        'mediatype': 'tvshow'
    })
    li.setArt({'thumb': poster_url} if poster_url else {'thumb': 'DefaultTVShows.png'})
    
    if context_items is None:
        serie_id = series.get("serieId")
        context_items = [(
            "Pozrie≈• si nesk√¥r ...",
            f'RunPlugin({build_url({"action": "add_watch_later", "type": "serie", "id": serie_id})})'
        )]
    if context_items:
        li.addContextMenuItems(context_items)
        
    xbmcplugin.addDirectoryItem(handle=addon_handle, url=url, listitem=li, isFolder=True)

def add_pagination_controls(page, total_count, per_page, query=None, action='show_movies'):
    # Hlavn√© menu
    url = build_url({'action': 'main_menu'})
    li = xbmcgui.ListItem(label='[B][COLOR white]<< Prejdi na hlavn√© menu[/COLOR][/B]')
    li.setArt({'icon': 'DefaultFolderBack.png'})
    xbmcplugin.addDirectoryItem(handle=ADDON_HANDLE, url=url, listitem=li, isFolder=True)

    # Predo≈°l√° strana
    if page > 1:
        prev_params = {'action': action, 'page': page - 1}
        if query:
            prev_params['query'] = query
        url = build_url(prev_params)
        li = xbmcgui.ListItem(label='[B][COLOR white]< Predo≈°l√° strana[/COLOR][/B]')
        li.setArt({'icon': 'DefaultFolderBack.png'})
        xbmcplugin.addDirectoryItem(handle=ADDON_HANDLE, url=url, listitem=li, isFolder=True)

    # ƒéal≈°ia strana
    if total_count == per_page:
        next_params = {'action': action, 'page': page + 1}
        if query:
            next_params['query'] = query
        url = build_url(next_params)
        li = xbmcgui.ListItem(label='[B][COLOR white]>> ƒéal≈°ia strana[/COLOR][/B]')
        li.setArt({'icon': 'DefaultFolderForward.png'})
        xbmcplugin.addDirectoryItem(handle=ADDON_HANDLE, url=url, listitem=li, isFolder=True)

# -------- Hist√≥ria vyhƒæad√°vania --------
def save_search_term(term):
    history = []
    if os.path.exists(SEARCH_HISTORY_FILE):
        with open(SEARCH_HISTORY_FILE, 'r', encoding='utf-8') as f:
            try:
                history = json.load(f)
            except json.JSONDecodeError:
                history = []
    if term in history:
        history.remove(term)
    history.insert(0, term)
    history = history[:20]
    with open(SEARCH_HISTORY_FILE, 'w', encoding='utf-8') as f:
        json.dump(history, f)

def load_search_terms():
    if not os.path.exists(SEARCH_HISTORY_FILE):
        return []
    with open(SEARCH_HISTORY_FILE, 'r', encoding='utf-8') as f:
        try:
            return json.load(f)
        except json.JSONDecodeError:
            return []

# -------- Hist√≥ria prehr√°van√≠ filmov --------
def save_played_movie(item_id):
    history = []
    if os.path.exists(MOVIE_HISTORY_FILE):
        with open(MOVIE_HISTORY_FILE, 'r', encoding='utf-8') as f:
            try:
                history = json.load(f)
            except json.JSONDecodeError:
                history = []
    if item_id in history:
        history.remove(item_id)
    history.insert(0, item_id)
    history = history[:20]
    with open(MOVIE_HISTORY_FILE, 'w', encoding='utf-8') as f:
        json.dump(history, f)

# -------- Hist√≥ria prehr√°van√≠ seri√°lov --------
def save_played_series(item_id):
    history = []
    if os.path.exists(SERIE_HISTORY_FILE):
        with open(SERIE_HISTORY_FILE, 'r', encoding='utf-8') as f:
            try:
                history = json.load(f)
            except json.JSONDecodeError:
                history = []
    if item_id in history:
        history.remove(item_id)
    history.insert(0, item_id)
    history = history[:20]
    with open(SERIE_HISTORY_FILE, 'w', encoding='utf-8') as f:
        json.dump(history, f)

#-------- Naƒç√≠tanie hist√≥rie prehr√°van√≠ filmov --------
def load_played_movies():
    if not os.path.exists(MOVIE_HISTORY_FILE):
        return []
    with open(MOVIE_HISTORY_FILE, 'r', encoding='utf-8') as f:
        try:
            return json.load(f)
        except json.JSONDecodeError:
            return []

#-------- Naƒç√≠tanie hist√≥rie prehr√°van√≠ seri√°lov --------
def load_played_series():
    if not os.path.exists(SERIE_HISTORY_FILE):
        return []
    with open(SERIE_HISTORY_FILE, 'r', encoding='utf-8') as f:
        try:
            return json.load(f)
        except json.JSONDecodeError:
            return []

# --------- Mazanie historie --------
def clear_played_history():
    movie_deleted = False
    series_deleted = False

    if os.path.exists(MOVIE_HISTORY_FILE):
        os.remove(MOVIE_HISTORY_FILE)
        movie_deleted = True

    if os.path.exists(SERIE_HISTORY_FILE):
        os.remove(SERIE_HISTORY_FILE)
        series_deleted = True

    if movie_deleted or series_deleted:
        xbmcgui.Dialog().notification("Hotovo", "Naposledy sledovan√© bolo vymazan√©.", xbmcgui.NOTIFICATION_INFO, 3000)
    else:
        xbmcgui.Dialog().notification("Upozornenie", "Zoznamy s√∫ u≈æ pr√°zdne.", xbmcgui.NOTIFICATION_INFO, 3000)

# --------- Mazanie historie hƒæadania --------
def clear_search_history():
    if os.path.exists(SEARCH_HISTORY_FILE):
        os.remove(SEARCH_HISTORY_FILE)
        xbmcgui.Dialog().notification("Hotovo", "Hist√≥ria hƒæadania bola vymazan√°.", xbmcgui.NOTIFICATION_INFO, 3000)
    else:
        xbmcgui.Dialog().notification("Upozornenie", "Hist√≥ria je u≈æ pr√°zdna.", xbmcgui.NOTIFICATION_INFO, 3000)

# -------- Ostatn√© funkcie --------
def build_url(query):
    return BASE_URL + '?' + urllib.parse.urlencode(query)

def main_menu():
    """Zobrazenie hlavn√©ho menu"""
    xbmcplugin.setPluginCategory(ADDON_HANDLE, 'Hlavn√© menu')
    xbmcplugin.setContent(ADDON_HANDLE, 'videos')

    # Vytvorenie polo≈æiek menu
    menu_items = [
        ('Vyhƒæad√°vanie', 'search', 'DefaultAddonsSearch.png'),
        ('Naposledy hƒæadan√©', 'recent_searches', 'DefaultFolder.png'),
        ('Naposledy sledovan√© filmy', 'recently_played', 'DefaultPlaylist.png'),
        ('Naposledy sledovan√© seri√°ly', 'recently_played_series', 'DefaultPlaylist.png'),
        ('Najnov≈°ie filmy', 'show_latest_movies', 'DefaultRecentlyAddedMovies.png'),
        ('Novinky dabovan√© (d√°tum vydania)', 'show_latest_dubbed_movies', 'DefaultRecentlyAddedMovies.png'),
        ('Filmy s CZ/SK dabingom (najnov≈°√≠ stream)', 'show_movies_with_cz_audio', 'DefaultRecentlyAddedMovies.png'),
        ('Najnov≈°ie seri√°ly', 'list_latest_series', 'DefaultRecentlyAddedEpisodes.png'),
        ('Tipy na dnes (ƒåSFD)', 'typy_na_dnes_csfd', 'DefaultTVShows.png'),
        ('Trending filmy (posledn√Ωch 14 dn√≠) TMDB', 'list_trending_movies_last_14_days', 'DefaultMovies.png'),
        ('Top 100 popul√°rnych filmov (CZ/SK) TMDB', 'list_top_popular_movies_czsk', 'DefaultMovies.png'),
        ('Top 100 najlep≈°ie hodnoten√Ωch filmov (CZ/SK) TMDB', 'list_top_rated_movies_czsk', 'DefaultMovies.png'),
        ('Naposledy pridan√© filmy', 'show_latest_added_movies', 'DefaultRecentlyAddedMovies.png'),
        ('Naposledy pridan√© seri√°ly', 'list_latest_added_series', 'DefaultRecentlyAddedEpisodes.png'),
        ('Pozrie≈• si nesk√¥r', 'list_watch_later', 'DefaultFolder.png'),
        ('Filmy podƒæa n√°zvu (A-Z)', 'list_movies_by_name', 'DefaultVideo.png'),
        ('Seri√°ly podƒæa n√°zvu (A-Z)', 'list_series_by_name', 'DefaultTVShows.png'),
        ('Vymaza≈• hist√≥riu hƒæadania', 'clear_search_history', 'DefaultVideoDeleted.png'),
        ('Vymaza≈• naposledy sledovan√© zoznamy', 'clear_played_history', 'DefaultVideoDeleted.png'),
        ('Filmy', 'show_movies', 'DefaultVideo.png'),
        ('Seri√°ly', 'list_series', 'DefaultTVShows.png')
    ]

    # Pridanie polo≈æiek do menu
    for label, action, icon in menu_items:
        url = build_url({'action': action})
        li = xbmcgui.ListItem(label=label)
        li.setArt({'icon': icon, 'thumb': icon})
        xbmcplugin.addDirectoryItem(handle=ADDON_HANDLE, url=url, listitem=li, isFolder=action not in ['clear_search_history', 'clear_played_history'])

    xbmcplugin.endOfDirectory(ADDON_HANDLE)

def search_movies():
    keyboard = xbmc.Keyboard('', 'Zadaj n√°zov filmu alebo seri√°lu')
    keyboard.doModal()

    if keyboard.isConfirmed():
        search_text = keyboard.getText().strip()
        if not search_text:
            xbmcgui.Dialog().notification("Chyba", "Nebolo zadan√© niƒç na vyhƒæadanie.", xbmcgui.NOTIFICATION_ERROR, 3000)
            main_menu()
            return
        save_search_term(search_text)
        process_tmdb_search_results(search_text)
    else:
        xbmc.log("Hƒæadanie bolo zru≈°en√© (ESC alebo klik na Cancel).", xbmc.LOGINFO)
        main_menu()

def process_tmdb_search_results(query, page=1):
    """Process TMDB search results and verify against our database"""
    xbmcplugin.setPluginCategory(ADDON_HANDLE, 'V√Ωsledky vyhƒæad√°vania')
    xbmcplugin.setContent(ADDON_HANDLE, 'videos')

    # Add "Go to main menu" as first item
    url = build_url({'action': 'main_menu'})
    li = xbmcgui.ListItem(label='[B]<< Prejdi na hlavn√© menu[/B]')
    li.setArt({'icon': 'DefaultFolderBack.png'})
    xbmcplugin.addDirectoryItem(handle=ADDON_HANDLE, url=url, listitem=li, isFolder=True)

    # Get TMDB results
    tmdb_results = search_movie_tmdb(query)
    if not tmdb_results:
        xbmcgui.Dialog().notification("Info", "Nena≈°li sa ≈æiadne v√Ωsledky.", xbmcgui.NOTIFICATION_INFO, 3000)
        xbmcplugin.endOfDirectory(ADDON_HANDLE)
        return

    # Verify against our DB and create combined results
    movies_found = []
    series_found = []

    for item in tmdb_results:
        tmdb_id = item['tmdbId']
        media_type = item['mediaType']

        if media_type == "movie":
            # Check movies collection
            movie = mongo_api.get_item("movies", "tmdbId", tmdb_id)
            if movie and movie.get("status") == 1:
                movies_found.append(movie)
        elif media_type == "tv":
            # Check series collection
            series = mongo_api.get_item("series", "tmdbId", tmdb_id)
            if series:
                series_found.append(series)

    # Pagination
    skip_count = (page - 1) * PER_PAGE
    all_results = movies_found + series_found
    total_results = len(all_results)

    if not all_results:
        xbmcgui.Dialog().notification("Info", "Nena≈°li sa ≈æiadne v√Ωsledky v tvojej kni≈ænici.", xbmcgui.NOTIFICATION_INFO, 3000)
        xbmcplugin.endOfDirectory(ADDON_HANDLE)
        return

    # Add "Previous page" if needed
    if page > 1:
        prev_page_url = build_url({'action': 'search_results', 'query': query, 'page': page - 1})
        li = xbmcgui.ListItem(label='[B]< Predo≈°l√° strana[/B]')
        li.setArt({'icon': 'DefaultFolderBack.png'})
        xbmcplugin.addDirectoryItem(handle=ADDON_HANDLE, url=prev_page_url, listitem=li, isFolder=True)

    # Display movies
    for movie in movies_found[skip_count:skip_count + PER_PAGE]:
        add_movie_listitem(movie, ADDON_HANDLE)

    # Display series
    for series in series_found[skip_count:skip_count + PER_PAGE]:
        add_series_listitem(series, ADDON_HANDLE)

    # Add "Next page" if needed
    if total_results > skip_count + PER_PAGE:
        next_page_url = build_url({'action': 'search_results', 'query': query, 'page': page + 1})
        li = xbmcgui.ListItem(label='[B]>> ƒéal≈°ia strana[/B]')
        xbmcplugin.addDirectoryItem(handle=ADDON_HANDLE, url=next_page_url, listitem=li, isFolder=True)

    xbmcplugin.endOfDirectory(ADDON_HANDLE)

def show_movies(query=None, page=1):
    xbmcplugin.setPluginCategory(ADDON_HANDLE, 'V√Ωsledky vyhƒæad√°vania' if query else 'Filmy')
    xbmcplugin.setContent(ADDON_HANDLE, 'videos')
    try:
        if query is None:
            mongo_query = {"status": 1}
        elif isinstance(query, str):
            mongo_query = {"title": {"$regex": query, "$options": "i"}, "status": 1}
        elif isinstance(query, dict):
            mongo_query = query
        else:
            mongo_query = {"status": 1}

        skip_count = (page - 1) * PER_PAGE
        
        # bezpeƒçn√Ω cache key
        query_str = json.dumps(mongo_query, sort_keys=True)
        query_hash = hashlib.md5(query_str.encode("utf-8")).hexdigest()
        cache_key = f"movies_{query_hash}_{skip_count}_{PER_PAGE}"

        movies = redis_cache.get_or_cache(
            cache_key,
            lambda: mongo_api.get_items(
                "movies",
                query=mongo_query,
                sort={"movieId": -1},
                skip=skip_count,
                limit=PER_PAGE
            ),
            ttl=600
        )

        # Pridaj navig√°ciu na zaƒçiatok
        add_pagination_controls(page, 0, PER_PAGE, query, action='show_movies')

        count = 0
        for movie in movies:
            count += 1
            add_movie_listitem(movie, ADDON_HANDLE)

        # Pridaj navig√°ciu na koniec, ak treba
        add_pagination_controls(page, count, PER_PAGE, query, action='show_movies')

    except Exception as e:
        xbmc.log(f"Error in show_movies: {str(e)}", xbmc.LOGERROR)
        xbmcgui.Dialog().notification("Chyba", "Probl√©m s pripojen√≠m k API", xbmcgui.NOTIFICATION_ERROR)
    finally:
        xbmcplugin.endOfDirectory(ADDON_HANDLE)

# Zoznam filmov podla datumu vydania
def show_latest_movies(page=1):
    xbmcplugin.setPluginCategory(ADDON_HANDLE, 'Najnov≈°ie filmy')
    xbmcplugin.setContent(ADDON_HANDLE, 'movies')

    skip_count = (page - 1) * PER_PAGE

    movies = mongo_api.get_items(
        "movies",
        query={"status": 1},
        sort={"release_date": -1},
        skip=skip_count,
        limit=PER_PAGE
    )

    movies_list = list(movies)

    # Navig√°cia hore
    add_pagination_controls(page, 0, PER_PAGE, action='show_latest_movies')

    count = 0
    for movie in movies_list:
        count += 1
        add_movie_listitem(movie, ADDON_HANDLE)

    # Navig√°cia dole
    add_pagination_controls(page, count, PER_PAGE, action='show_latest_movies')

    xbmcplugin.endOfDirectory(ADDON_HANDLE)

# Zoznam filmov podla datumu pridania
def show_latest_added_movies(page=1):
    xbmcplugin.setPluginCategory(ADDON_HANDLE, 'Najnov≈°ie pridan√© filmy')
    xbmcplugin.setContent(ADDON_HANDLE, 'movies')

    skip_count = (page - 1) * PER_PAGE

    movies = mongo_api.get_items(
        "movies",
        query={"status": 1},
        sort={"movieId": -1},
        skip=skip_count,
        limit=PER_PAGE
    )

    movies_list = list(movies)

    # Navig√°cia hore
    add_pagination_controls(page, 0, PER_PAGE, action='show_latest_added_movies')

    count = 0
    for movie in movies_list:
        count += 1
        add_movie_listitem(movie, ADDON_HANDLE)

    # Navig√°cia dole
    add_pagination_controls(page, count, PER_PAGE, action='show_latest_added_movies')

    xbmcplugin.endOfDirectory(ADDON_HANDLE)

#-------- Filmy s CZ/SK dabingom (podƒæa najnov≈°ieho streamu) --------
def show_movies_with_cz_audio(page=1):
    xbmcplugin.setPluginCategory(ADDON_HANDLE, 'Filmy s CZ/SK dabingom')
    xbmcplugin.setContent(ADDON_HANDLE, 'movies')

    PER_FETCH = 100  # max poƒçet r√¥znych filmov (movieId) prednaƒç√≠tan√Ωch z movie_detail
    skip_count = (page - 1) * PER_PAGE

    # 1. Z√≠skaj 100 najnov≈°√≠ch z√°znamov z movie_detail s CZE/SLO/SLK audio
    pipeline = [
        {
            "$match": {
                "audio": {
                    "$elemMatch": {
                        "$regex": "(CZE|SLO|SLK)",
                        "$options": "i"
                    }
                }
            }
        },
        {
            "$sort": { "_id": -1 }
        },
        {
            "$group": {
                "_id": "$fkMovieId",
                "latestDetailId": { "$first": "$_id" }
            }
        },
        {
            "$sort": { "latestDetailId": -1 }
        },
        {
            "$limit": PER_FETCH
        }
    ]

    result = mongo_api.run_aggregation("movie_detail", pipeline)
    all_movie_ids = [doc["_id"] for doc in result]  # _id tu je fkMovieId

    # 2. Vyber len tie pre aktu√°lnu str√°nku
    paged_movie_ids = all_movie_ids[skip_count:skip_count + PER_PAGE]

    if not paged_movie_ids:
        xbmcplugin.endOfDirectory(ADDON_HANDLE)
        return

    # 3. Naƒç√≠taj pr√≠slu≈°n√© filmy z kolekcie movies
    movies = mongo_api.get_items(
        "movies",
        query={"movieId": {"$in": paged_movie_ids}, "status": 1}
    )

    # 4. Zoradenie podƒæa p√¥vodn√©ho poradia
    movies_dict = {m["movieId"]: m for m in movies}
    sorted_movies = [movies_dict[mid] for mid in paged_movie_ids if mid in movies_dict]

    # 5. Navig√°cia hore
    add_pagination_controls(page, 0, PER_PAGE, action='show_movies_with_cz_audio')

    count = 0
    for movie in sorted_movies:
        count += 1
        add_movie_listitem(movie, ADDON_HANDLE)

    # 6. Navig√°cia dole
    add_pagination_controls(page, count, PER_PAGE, action='show_movies_with_cz_audio')

    xbmcplugin.endOfDirectory(ADDON_HANDLE)

#-------- Najnov≈°ie seri√°ly --------
def list_latest_series():
    xbmcplugin.setPluginCategory(ADDON_HANDLE, 'Najnov≈°ie seri√°ly')
    xbmcplugin.setContent(ADDON_HANDLE, 'tvshows')

    try:
        # Hlavn√© menu sp√§≈•
        url = build_url({'action': 'main_menu'})
        li = xbmcgui.ListItem(label='[B]<< Prejdi na hlavn√© menu[/B]')
        li.setArt({'icon': 'DefaultFolderBack.png'})
        xbmcplugin.addDirectoryItem(handle=ADDON_HANDLE, url=url, listitem=li, isFolder=True)

        # Najnov≈°ie seri√°ly s epiz√≥dami
        series_with_episodes = mongo_api.run_aggregation("episodes", [
            {"$match": {"statusWS": 1}},
            {"$group": {"_id": "$serieId"}},
            {"$lookup": {
                "from": "series",
                "localField": "_id",
                "foreignField": "serieId",
                "as": "seriesInfo"
            }},
            {"$unwind": "$seriesInfo"},
            {"$replaceRoot": {"newRoot": "$seriesInfo"}},
            {"$sort": {"last_air_date": -1}},
            {"$limit": 50}
        ])

        for s in series_with_episodes:
            add_series_listitem(s, ADDON_HANDLE)

    except Exception as e:
        xbmc.log(f"Error in list_latest_series: {str(e)}", xbmc.LOGERROR)
        xbmcgui.Dialog().notification("Chyba", "Probl√©m s pripojen√≠m k API", xbmcgui.NOTIFICATION_ERROR)
    finally:
        xbmcplugin.endOfDirectory(ADDON_HANDLE)

#-------- Najnov≈°ie pridan√© seri√°ly --------
def list_latest_added_series(page=1):
    xbmcplugin.setPluginCategory(ADDON_HANDLE, 'Najnov≈°ie pridan√© seri√°ly')
    xbmcplugin.setContent(ADDON_HANDLE, 'tvshows')

    skip_count = (page - 1) * PER_PAGE

    # Get latest 50 series with available episodes
    series_with_episodes = mongo_api.run_aggregation("episodes", [
        {"$match": {"statusWS": 1}},
        {"$group": {"_id": "$serieId"}},
        {"$lookup": {
            "from": "series",
            "localField": "_id",
            "foreignField": "serieId",
            "as": "seriesInfo"
        }},
        {"$unwind": "$seriesInfo"},
        {"$replaceRoot": {"newRoot": "$seriesInfo"}},
        {"$sort": {"serieId": -1}},
        {"$skip": skip_count},
        {"$limit": PER_PAGE}
    ])

    series_list = list(series_with_episodes)

    # Navig√°cia hore
    add_pagination_controls(page, 0, PER_PAGE, action='list_latest_added_series')

    count = 0
    for series in series_list:
        count += 1
        add_series_listitem(series, ADDON_HANDLE)

    # Navig√°cia dole
    add_pagination_controls(page, count, PER_PAGE, action='list_latest_added_series')

    xbmcplugin.endOfDirectory(ADDON_HANDLE)

# -------- Naposledy hƒæadan√© seri√°ly--------
def list_recent_searches():
    xbmcplugin.setPluginCategory(ADDON_HANDLE, 'Naposledy hƒæadan√©')
    xbmcplugin.setContent(ADDON_HANDLE, 'videos')

    search_terms = load_search_terms()

    if not search_terms:
        xbmcgui.Dialog().notification("Bez hist√≥rie", "≈Ωiadne ned√°vne vyhƒæad√°vania.", xbmcgui.NOTIFICATION_INFO, 3000)
        xbmcplugin.endOfDirectory(ADDON_HANDLE)
        return

    for term in search_terms:
        if term and isinstance(term, str) and term.strip():  # kontrola na nepr√°zdny re≈•azec
            url = build_url({'action': 'search', 'query': term})
            li = xbmcgui.ListItem(label=term.strip())
            xbmcplugin.addDirectoryItem(handle=ADDON_HANDLE, url=url, listitem=li, isFolder=True)
        else:
            xbmc.log(f"[SC3] Preskoƒçen√Ω neplatn√Ω v√Ωraz vo vyhƒæad√°vacej hist√≥rii: {term}", xbmc.LOGWARNING)

    xbmcplugin.endOfDirectory(ADDON_HANDLE)

#-------- Naposledy sledovan√© filmy --------
def list_played_movies():
    xbmcplugin.setPluginCategory(ADDON_HANDLE, 'Naposledy sledovan√©')
    xbmcplugin.setContent(ADDON_HANDLE, 'videos')

    history = load_played_movies()

    if not history:
        xbmcgui.Dialog().notification("Bez z√°znamov", "≈Ωiadne ned√°vno prehr√°van√© filmy.", xbmcgui.NOTIFICATION_INFO, 3000)
        xbmcplugin.endOfDirectory(ADDON_HANDLE)
        return

    for movie_id in history:
        movie = mongo_api.get_item("movies", "movieId", movie_id)
        if movie:
            add_movie_listitem(movie, ADDON_HANDLE)

    xbmcplugin.endOfDirectory(ADDON_HANDLE)

#-------- Naposledy sledovan√© seri√°ly --------
def list_played_series():
    xbmcplugin.setPluginCategory(ADDON_HANDLE, 'Naposledy sledovan√© seri√°ly')
    xbmcplugin.setContent(ADDON_HANDLE, 'tvshows')

    history = load_played_series()

    if not history:
        xbmcgui.Dialog().notification("Bez z√°znamov", "≈Ωiadne ned√°vno prehr√°van√© seri√°ly.", xbmcgui.NOTIFICATION_INFO, 3000)
        xbmcplugin.endOfDirectory(ADDON_HANDLE)
        return

    for serie_id in history:
        series = mongo_api.get_item("series", "serieId", serie_id)
        if series:
            add_series_listitem(series, ADDON_HANDLE)

    xbmcplugin.endOfDirectory(ADDON_HANDLE)

#  Seri√°ly
def list_series(page=1):
    xbmcplugin.setPluginCategory(ADDON_HANDLE, 'Seri√°ly')
    xbmcplugin.setContent(ADDON_HANDLE, 'tvshows')

    skip_count = (page - 1) * PER_PAGE

    series_with_episodes = mongo_api.run_aggregation("episodes", [
        {"$match": {"statusWS": 1}},
        {"$group": {"_id": "$serieId"}},
        {"$lookup": {
            "from": "series",
            "localField": "_id",
            "foreignField": "serieId",
            "as": "seriesInfo"
        }},
        {"$unwind": "$seriesInfo"},
        {"$replaceRoot": {"newRoot": "$seriesInfo"}},
        {"$sort": {"title": 1}},
        {"$skip": skip_count},
        {"$limit": PER_PAGE}
    ])

    series_list = list(series_with_episodes)

    # Navig√°cia hore
    add_pagination_controls(page, 0, PER_PAGE, action='list_series')

    count = 0
    for series in series_list:
        count += 1
        add_series_listitem(series, ADDON_HANDLE)

    # Navig√°cia dole
    add_pagination_controls(page, count, PER_PAGE, action='list_series')

    xbmcplugin.endOfDirectory(ADDON_HANDLE)

def list_seasons(serieId):
    xbmcplugin.setPluginCategory(ADDON_HANDLE, 'Sez√≥ny')
    xbmcplugin.setContent(ADDON_HANDLE, 'seasons')

    try:
        serieId = int(serieId)
        
        cache_key = f"seasons_{serieId}"
        all_seasons = redis_cache.get_or_cache(
            cache_key,
            lambda: mongo_api.get_items("seasons", query={"serieId": serieId}),
            ttl=600
        )

        available_counts = mongo_api.run_aggregation("episodes", [
            {"$match": {"serieId": serieId, "statusWS": 1}},
            {"$group": {"_id": "$seasonId", "count": {"$sum": 1}}}
        ])
        
        available_dict = {s["_id"]: s["count"] for s in available_counts}

        for season in all_seasons:
            season_id = season["seasonId"]
            season_num = season["season_number"]
            name = season.get("name") or f"Sez√≥na {season_num}"
            year = season.get("air_date", "")[:4] if season.get("air_date") else ""
            ep_count = available_dict.get(season_id, 0)

            # Label
            label = f"[B]{name}[/B]"
            if year:
                label += f" [COLOR grey]({year})[/COLOR]"
            if ep_count > 0:
                label += f" [COLOR lightgreen]{ep_count} epiz√≥d[/COLOR]"

            li = xbmcgui.ListItem(label=label)
            li.setInfo('video', {
                'title': name,
                'plot': season.get("overview", ""),
                'premiered': season.get("air_date", ""),
                'season': season_num,
                'episode': season.get("episode_count", 0),
                'mediatype': 'season'
            })

            if season.get("posterUrl"):
                li.setArt({
                    'thumb': season["posterUrl"],
                    'poster': season["posterUrl"],
                    'fanart': season["posterUrl"]
                })

            url = build_url({'action': 'list_episodes', 'serieId': serieId, 'seasonId': season_id})
            xbmcplugin.addDirectoryItem(handle=ADDON_HANDLE, url=url, listitem=li, isFolder=True)

    finally:
        xbmcplugin.endOfDirectory(ADDON_HANDLE)

def list_episodes(serieId, seasonId):
    xbmcplugin.setPluginCategory(ADDON_HANDLE, 'Epiz√≥dy')
    xbmcplugin.setContent(ADDON_HANDLE, 'episodes')

    try:
        serieId = int(serieId)
        seasonId = int(seasonId)

        season_data = mongo_api.get_item("seasons", "seasonId", seasonId)
        season_num = season_data.get("season_number", 1) if season_data else 1

        episodes = redis_cache.get_or_cache(
            f"episodes_{serieId}_{seasonId}",
            lambda: mongo_api.get_items(
                "episodes",
                query={"serieId": serieId, "seasonId": seasonId, "statusWS": 1},
                sort={"episode_number": 1}
            ),
            ttl=600
        )

        for episode in episodes:
            ep_num = episode.get("episode_number", 0)
            ep_title = episode.get("name", f"Epiz√≥da {ep_num}")
            aired = episode.get("air_date", "")
            aired_str = ""
            try:
                aired_str = datetime.strptime(aired, '%Y-%m-%d').strftime('%d.%m.%Y') if aired else ""
            except:
                pass

            rating = episode.get("vote_average", 0)
            runtime = episode.get("runtime", 0)

            # Form√°tovan√Ω label
            label = f"[B]{ep_num}. {ep_title}[/B]"
            if aired_str:
                label += f" [COLOR grey]({aired_str})[/COLOR]"

            details = []
            if runtime:
                details.append(f"{runtime} min")
            if rating:
                details.append(f"{rating}/10")
            if details:
                label += f" [COLOR orange]{' ‚Ä¢ '.join(details)}[/COLOR]"

            li = xbmcgui.ListItem(label=label)
            li.setInfo('video', {
                'title': ep_title,
                'plot': episode.get("overview", "Bez popisu."),
                'season': season_num,
                'episode': ep_num,
                'aired': aired,
                'rating': rating,
                'votes': episode.get("vote_count", 0),
                'duration': runtime,
                'mediatype': 'episode'
            })

            if episode.get("stillUrl"):
                li.setArt({
                    'thumb': episode["stillUrl"],
                    'poster': episode["stillUrl"],
                    'fanart': episode["stillUrl"]
                })

            url = build_url({'action': 'select_stream_serie', 'episodeId': episode["episodeId"]})
            li.setProperty('IsPlayable', 'true')
            xbmcplugin.addDirectoryItem(handle=ADDON_HANDLE, url=url, listitem=li, isFolder=False)

    finally:
        xbmcplugin.endOfDirectory(ADDON_HANDLE)

def list_watch_later():
    xbmcplugin.setPluginCategory(ADDON_HANDLE, 'Pozrie≈• si nesk√¥r')
    xbmcplugin.setContent(ADDON_HANDLE, 'videos')
    items = load_watch_later()

    for entry in items:
        if entry['type'] == 'movie':
            movie = mongo_api.get_item("movies", "movieId", entry['id'])
            if movie:
                context_items = [(
                    "Odstr√°ni≈• zo zoznamu",
                    f'RunPlugin({build_url({"action": "remove_watch_later", "type": "movie", "id": entry["id"]})})'
                )]
                add_movie_listitem(movie, ADDON_HANDLE, context_items)
        elif entry['type'] == 'serie':
            series = mongo_api.get_item("series", "serieId", entry['id'])
            if series:
                context_items = [(
                    "Odstr√°ni≈• zo zoznamu",
                    f'RunPlugin({build_url({"action": "remove_watch_later", "type": "serie", "id": entry["id"]})})'
                )]
                add_series_listitem(series, ADDON_HANDLE, context_items)

    xbmcplugin.endOfDirectory(ADDON_HANDLE)

def select_stream(movie_id):
    try:
        movie_id = int(movie_id)
    except ValueError:
        xbmc.log(f"movie_id nie je ƒç√≠slo: {movie_id}", xbmc.LOGERROR)
        xbmcgui.Dialog().notification("Chyba", "Neplatn√© ID filmu.", xbmcgui.NOTIFICATION_ERROR, 3000)
        xbmcplugin.endOfDirectory(ADDON_HANDLE)
        return

    details = mongo_api.get_items("movie_detail", query={"fkMovieId": movie_id})

    if not details:
        xbmcgui.Dialog().notification("≈Ωiadne s√∫bory", "Pre tento film nie s√∫ dostupn√© ≈æiadne s√∫bory.", xbmcgui.NOTIFICATION_INFO, 3000)
        xbmcplugin.endOfDirectory(ADDON_HANDLE)
        return

    # Sort najprv podƒæa rozl√≠≈°enia (custom poradie), potom podƒæa veƒækosti (ako float)
    details.sort(
        key=lambda x: (
            resolution_order.get(x.get("resolution", ""), 0),  # predvolen√© 0 ak ch√Ωba
            float(x.get("size", "0").replace(" GB", ""))
        ),
        reverse=True  # zoradenie od najvy≈°≈°ieho rozl√≠≈°enia a veƒækosti
    )

    # Get movie details for thumbnail
    movie_info = mongo_api.get_item("movies", "movieId", movie_id)
    default_thumb = movie_info.get('posterUrl', 'DefaultAddonVideo.png') if movie_info else 'DefaultAddonVideo.png'

    dialog = xbmcgui.Dialog()
    items = []

    for file in details:
        audio_streams = file.get("audio", [])
        resolution = file.get("resolution", "N/A")
        size = file.get("size", "N/A")
        bitrate = file.get("bitrate", "N/A")
        video_codec = file.get("videoCodec", "N/A")
        filename = file.get("name", "N/A")

        if "-dmstrm." in filename:
            display_filename = "[COLOR FFFF8800]Demo[/COLOR][COLOR FFFFFFFF]Stream[/COLOR]"
        else:
            display_filename = f"[COLOR FFFFFFFF]{filename}[/COLOR]"

        li = xbmcgui.ListItem(label=f"[B]{resolution}[/B]  ‚Ä¢  [COLOR FFFFCC00]{', '.join(audio_streams)}[/COLOR]  ‚Ä¢  [COLOR FF00FF00]{size}[/COLOR]  ‚Ä¢ {bitrate} ‚Ä¢ {video_codec}")
        li.setLabel2(display_filename)
        li.setArt({'thumb': default_thumb, 'icon': 'DefaultAddonVideo.png'})

        items.append(li)

    index = dialog.select(
        "Vyberte stream: [COLOR FFFFCC00]Rozli≈°enie ‚Ä¢ Veƒækos≈•[/COLOR]",
        items,
        useDetails=True
    )

    if index >= 0:
        selected_ident = details[index].get("ident")
        play_url = get_ws().get_stream_url(ident=selected_ident, mongo_collection="movie_detail")

        error_messages = {
            "deleted": ("Vymazan√©", f"Z√°znam {selected_ident} bol √∫spe≈°ne vymazan√Ω.", xbmcgui.NOTIFICATION_INFO),
            "unauthorized": ("Pr√≠stup odmietnut√Ω", "Nem√°≈° pr√°va na mazanie z datab√°zy.", xbmcgui.NOTIFICATION_ERROR),
            "delete_error": ("Chyba", "Mazanie z datab√°zy zlyhalo.", xbmcgui.NOTIFICATION_ERROR),
            "not_found": ("Nen√°jden√©", "Z√°znam s ident sa nena≈°iel.", xbmcgui.NOTIFICATION_INFO),
            "password_protected": ("S√∫bor je zaheslovan√Ω", "Nie je mo≈æn√© ho prehra≈•.", xbmcgui.NOTIFICATION_ERROR),
            "temporarily_unavailable": ("Doƒçasne nedostupn√©", "S√∫bor je moment√°lne nedostupn√Ω.", xbmcgui.NOTIFICATION_WARNING),
            "non_public_file": ("S√∫kromn√Ω s√∫bor", "Obsah nie je verejn√Ω. M√¥≈æe √≠s≈• o autorsky chr√°nen√© video.", xbmcgui.NOTIFICATION_ERROR),
            None: ("Stream URL", "Nepodarilo sa z√≠ska≈• stream URL.", xbmcgui.NOTIFICATION_ERROR)
        }

        if play_url in error_messages:
            title, message, icon = error_messages[play_url]
            xbmcgui.Dialog().notification(title, message, icon)
            xbmcplugin.endOfDirectory(ADDON_HANDLE, succeeded=False)
            return

        xbmc.log(f"Prehr√°vam film: {movie_info.get('title', 'Nezn√°my film')}", xbmc.LOGDEBUG)

        list_item = create_compatible_list_item(
            movie_info.get("title", "Nezn√°my film"),
            movie_info.get("overview", ""),
            movie_info.get("year", 0),
            default_thumb
        )
        
        list_item.setPath(play_url)
        xbmcplugin.setResolvedUrl(ADDON_HANDLE, True, list_item)

        save_played_movie(movie_id)

    xbmcplugin.endOfDirectory(ADDON_HANDLE)

def select_stream_serie(episodeId):
    try:
        episodeId = int(episodeId)
    except ValueError:
        xbmc.log(f"episodeId nie je ƒç√≠slo: {episodeId}", xbmc.LOGERROR)
        xbmcgui.Dialog().notification("Chyba", "Neplatn√© ID epiz√≥dy.", xbmcgui.NOTIFICATION_ERROR)
        xbmcplugin.endOfDirectory(ADDON_HANDLE)
        return

    details = mongo_api.get_items("episode_detail_links", query={"episodeId": episodeId})
    if not details:
        xbmcgui.Dialog().notification("≈Ωiadne s√∫bory", "Pre t√∫to epiz√≥du nie s√∫ dostupn√© s√∫bory.", xbmcgui.NOTIFICATION_INFO)
        xbmcplugin.endOfDirectory(ADDON_HANDLE)
        return

    details.sort(
        key=lambda x: (
            resolution_order.get(x.get("resolution", ""), 0),
            float(x.get("size", "0").replace(" GB", ""))
        ),
        reverse=True
    )

    episode = mongo_api.get_item("episodes", "episodeId", episodeId)
    serie_info = mongo_api.get_item("series", "serieId", episode.get("serieId")) if episode else None
    season = mongo_api.get_item("seasons", "seasonId", episode.get("seasonId")) if episode else None
    thumb = episode.get("stillUrl") or (serie_info.get("posterUrl", "DefaultAddonVideo.png") if serie_info else "DefaultAddonVideo.png")

    dialog = xbmcgui.Dialog()
    items = []

    for file in details:
        audio = file.get("audio", ["Nezn√°my"])
        resolution = file.get("resolution", "?")
        size = file.get("size", "?")
        bitrate = file.get("bitrate", "?")
        codec = file.get("videoCodec", "?")
        name = file.get("name", "N/A")

        if "-dmstrm." in name:
            display_filename = "[COLOR FFFF8800]Demo[/COLOR][COLOR FFFFFFFF]Stream[/COLOR]"
        else:
            display_filename = f"[COLOR FFFFFFFF]{name}[/COLOR]"
        
        li = xbmcgui.ListItem(label=f"[B]{resolution}[/B]  ‚Ä¢  [COLOR FFFFCC00]{', '.join(audio)}[/COLOR]  ‚Ä¢  [COLOR FF00FF00]{size}[/COLOR]  ‚Ä¢ {bitrate} ‚Ä¢ {codec}")
        li.setLabel2(f"{display_filename}")
        li.setArt({'thumb': thumb, 'icon': 'DefaultAddonVideo.png'})
        items.append(li)

    index = dialog.select("Vyberte stream: [COLOR FFFFCC00]Rozli≈°enie ‚Ä¢ Veƒækos≈•[/COLOR]", items, useDetails=True)

    if index < 0:
        xbmcplugin.endOfDirectory(ADDON_HANDLE)
        return

    selected_ident = details[index].get("ident")
    play_url = get_ws().get_stream_url(ident=selected_ident, mongo_collection="episode_detail_links")

    error_messages = {
        "deleted": ("Vymazan√©", f"Z√°znam {selected_ident} bol √∫spe≈°ne vymazan√Ω.", xbmcgui.NOTIFICATION_INFO),
        "unauthorized": ("Pr√≠stup odmietnut√Ω", "Nem√°≈° pr√°va na mazanie z datab√°zy.", xbmcgui.NOTIFICATION_ERROR),
        "delete_error": ("Chyba", "Mazanie z datab√°zy zlyhalo.", xbmcgui.NOTIFICATION_ERROR),
        "not_found": ("Nen√°jden√©", "Z√°znam s ident sa nena≈°iel.", xbmcgui.NOTIFICATION_INFO),
        "password_protected": ("S√∫bor je zaheslovan√Ω", "Nie je mo≈æn√© ho prehra≈•.", xbmcgui.NOTIFICATION_ERROR),
        "temporarily_unavailable": ("Doƒçasne nedostupn√©", "S√∫bor je moment√°lne nedostupn√Ω.", xbmcgui.NOTIFICATION_WARNING),
        "non_public_file": ("S√∫kromn√Ω s√∫bor", "Obsah nie je verejn√Ω. M√¥≈æe √≠s≈• o autorsky chr√°nen√© video.", xbmcgui.NOTIFICATION_ERROR),
        None: ("Stream URL", "Nepodarilo sa z√≠ska≈• stream URL.", xbmcgui.NOTIFICATION_ERROR)
    }

    if play_url in error_messages:
        title, message, icon = error_messages[play_url]
        xbmcgui.Dialog().notification(title, message, icon)
        xbmcplugin.endOfDirectory(ADDON_HANDLE, succeeded=False)
        return

    label = episode.get("name", "Epiz√≥da") if episode else "Epiz√≥da"
    year = serie_info.get("year", 0) if serie_info else 0
    plot = episode.get("overview", "") if episode else ""
    extra_info = {
        "season": season.get("season_number", 1) if season else 1,
        "episode": episode.get("episode_number", 1) if episode else 1,
        "tvshowtitle": serie_info.get("title", "") if serie_info else "",
        "genre": serie_info.get("genres", "") if serie_info else "",
        "plot": plot
    }

    list_item = create_compatible_list_item(label, plot, year, thumb, extra_info)
    list_item.setPath(play_url)
    xbmcplugin.setResolvedUrl(ADDON_HANDLE, True, list_item)

    if serie_info:
        save_played_series(serie_info.get("serieId"))
    xbmcplugin.endOfDirectory(ADDON_HANDLE)

# CSFD typy na dnes
def typy_na_dnes_csfd():
    xbmcplugin.setPluginCategory(ADDON_HANDLE, 'Tipy na dnes (ƒåSFD)')
    xbmcplugin.setContent(ADDON_HANDLE, 'movies')

    def fetch_csfd_tips():
        results = fetch_csfd_tip_titles()
        if not results or (isinstance(results, dict) and results.get("error")):
            return []

        movies = []
        for item in results:
            movie = mongo_api.get_item("movies", "title", item["title"], query={"year": item["year"]})
            if movie and movie.get("status") == 1:
                movies.append(movie)
        return movies

    movies = redis_cache.get_or_cache(
        "csfd_tips_full",
        fetch_csfd_tips,
        ttl=21600  # 6 hod√≠n
    )

    if not movies:
        xbmcgui.Dialog().notification("Chyba", "Nena≈°li sa ≈æiadne filmy", xbmcgui.NOTIFICATION_WARNING)
    else:
        for movie in movies:
            add_movie_listitem(movie, ADDON_HANDLE)

    xbmcplugin.endOfDirectory(ADDON_HANDLE)

def get_movies_by_initial(initial, length=1):
    """Z√≠skaj filmy zaƒç√≠naj√∫ce na dan√© p√≠smeno/znaky"""
    cache_key = f"movies_initial_{initial}_{length}"
    
    return redis_cache.get_or_cache(
        cache_key,
        lambda: mongo_api.get_items(
            "movies",
            query={"title": {"$regex": f'^{re.escape(initial)}', "$options": "i"}, "status": 1},
            sort={"title": 1}
        ),
        ttl=600 # 10 minut
    )

def get_series_by_initial(initial, length=1):
    """Z√≠skaj seri√°ly zaƒç√≠naj√∫ce na dan√© p√≠smeno/znaky"""
    cache_key = f"series_initial_{initial}_{length}"
    
    return redis_cache.get_or_cache(
        cache_key,
        lambda: mongo_api.run_aggregation("series", [
            {"$match": {
                "title": {"$regex": f'^{re.escape(initial)}', "$options": "i"}
            }},
            {"$lookup": {
                "from": "episodes",
                "localField": "serieId",
                "foreignField": "serieId",
                "as": "episodes"
            }},
            {"$match": {
                "episodes.statusWS": 1
            }},
            {"$sort": {"title": 1}}
        ]),
        ttl=600  # 10 minut
    )

def list_movies_by_name(initial=None, length=1):
    """Zobrazi≈• filmy podƒæa n√°zvu (p√≠smen√°, dvojice, trojice, zoznam)"""
    xbmcplugin.setPluginCategory(ADDON_HANDLE, 'Filmy podƒæa n√°zvu')
    xbmcplugin.setContent(ADDON_HANDLE, 'videos')
    
    # Pridanie n√°vratu do hlavn√©ho menu
    url = build_url({'action': 'main_menu'})
    li = xbmcgui.ListItem(label='[B]<< Hlavn√© menu[/B]')
    li.setArt({'icon': 'DefaultFolderBack.png'})
    xbmcplugin.addDirectoryItem(handle=ADDON_HANDLE, url=url, listitem=li, isFolder=True)
    
    if initial is None:
        # Zobrazi≈• p√≠smen√° A-Z a 0-9
        letters = [chr(i) for i in range(65, 91)]  # A-Z
        letters.extend([str(i) for i in range(10)])  # 0-9
        
        for letter in letters:
            movies = get_movies_by_initial(letter)
            count = len(movies)
            if count > 0:
                url = build_url({'action': 'list_movies_by_name', 'initial': letter, 'length': 1})
                li = xbmcgui.ListItem(label=f'{letter} ({count})')
                xbmcplugin.addDirectoryItem(handle=ADDON_HANDLE, url=url, listitem=li, isFolder=True)
    
    elif length == 1:
        # Zobrazi≈• dvojice p√≠smen pre zvolen√© p√≠smeno
        movies = get_movies_by_initial(initial)
        first_two_chars = sorted(list(set(movie['title'][:2].upper() for movie in movies if len(movie['title']) >= 2)))
        
        for two_chars in first_two_chars:
            if two_chars.startswith(initial.upper()):
                count = len([m for m in movies if m['title'].upper().startswith(two_chars)])
                if count > 0:
                    url = build_url({'action': 'list_movies_by_name', 'initial': two_chars, 'length': 2})
                    li = xbmcgui.ListItem(label=f'{two_chars} ({count})')
                    xbmcplugin.addDirectoryItem(handle=ADDON_HANDLE, url=url, listitem=li, isFolder=True)
    
    elif length == 2:
        # Zobrazi≈• trojice p√≠smen pre zvolen√∫ dvojicu
        movies = get_movies_by_initial(initial)
        first_three_chars = sorted(list(set(movie['title'][:3].upper() for movie in movies if len(movie['title']) >= 3)))
        
        for three_chars in first_three_chars:
            if three_chars.startswith(initial.upper()):
                count = len([m for m in movies if m['title'].upper().startswith(three_chars)])
                if count > 0:
                    url = build_url({'action': 'list_movies_by_name', 'initial': three_chars, 'length': 3})
                    li = xbmcgui.ListItem(label=f'{three_chars} ({count})')
                    xbmcplugin.addDirectoryItem(handle=ADDON_HANDLE, url=url, listitem=li, isFolder=True)
    
    else:
        # Zobrazi≈• filmy pre zvolen√∫ trojicu p√≠smen
        movies = get_movies_by_initial(initial, length=3)
        for movie in movies:
            add_movie_listitem(movie, ADDON_HANDLE)
    
    xbmcplugin.endOfDirectory(ADDON_HANDLE)

def list_series_by_name(initial=None, length=1):
    """Zobrazi≈• seri√°ly podƒæa n√°zvu (p√≠smen√°, dvojice, trojice, zoznam)"""
    xbmcplugin.setPluginCategory(ADDON_HANDLE, 'Seri√°ly podƒæa n√°zvu')
    xbmcplugin.setContent(ADDON_HANDLE, 'tvshows')
    
    # Pridanie n√°vratu do hlavn√©ho menu
    url = build_url({'action': 'main_menu'})
    li = xbmcgui.ListItem(label='[B]<< Hlavn√© menu[/B]')
    li.setArt({'icon': 'DefaultFolderBack.png'})
    xbmcplugin.addDirectoryItem(handle=ADDON_HANDLE, url=url, listitem=li, isFolder=True)
    
    if initial is None:
        # Zobrazi≈• p√≠smen√° A-Z a 0-9
        letters = [chr(i) for i in range(65, 91)]  # A-Z
        letters.extend([str(i) for i in range(10)])  # 0-9
        
        for letter in letters:
            series = get_series_by_initial(letter)
            count = len(series)
            if count > 0:
                url = build_url({'action': 'list_series_by_name', 'initial': letter, 'length': 1})
                li = xbmcgui.ListItem(label=f'{letter} ({count})')
                xbmcplugin.addDirectoryItem(handle=ADDON_HANDLE, url=url, listitem=li, isFolder=True)
    
    elif length == 1:
        # Zobrazi≈• dvojice p√≠smen pre zvolen√© p√≠smeno
        series = get_series_by_initial(initial)
        first_two_chars = sorted(list(set(s['title'][:2].upper() for s in series if len(s['title']) >= 2)))
        
        for two_chars in first_two_chars:
            if two_chars.startswith(initial.upper()):
                count = len([s for s in series if s['title'].upper().startswith(two_chars)])
                if count > 0:
                    url = build_url({'action': 'list_series_by_name', 'initial': two_chars, 'length': 2})
                    li = xbmcgui.ListItem(label=f'{two_chars} ({count})')
                    xbmcplugin.addDirectoryItem(handle=ADDON_HANDLE, url=url, listitem=li, isFolder=True)
    
    elif length == 2:
        # Zobrazi≈• trojice p√≠smen pre zvolen√∫ dvojicu
        series = get_series_by_initial(initial)
        first_three_chars = sorted(list(set(s['title'][:3].upper() for s in series if len(s['title']) >= 3)))
        
        for three_chars in first_three_chars:
            if three_chars.startswith(initial.upper()):
                count = len([s for s in series if s['title'].upper().startswith(three_chars)])
                if count > 0:
                    url = build_url({'action': 'list_series_by_name', 'initial': three_chars, 'length': 3})
                    li = xbmcgui.ListItem(label=f'{three_chars} ({count})')
                    xbmcplugin.addDirectoryItem(handle=ADDON_HANDLE, url=url, listitem=li, isFolder=True)
    
    else:
        # Zobrazi≈• seri√°ly pre zvolen√∫ trojicu p√≠smen
        series = get_series_by_initial(initial, length=3)
        for s in series:
            add_series_listitem(s, ADDON_HANDLE)
    
    xbmcplugin.endOfDirectory(ADDON_HANDLE)

def show_latest_dubbed_movies():
    xbmcplugin.setPluginCategory(ADDON_HANDLE, 'Novinky dabovan√©')
    xbmcplugin.setContent(ADDON_HANDLE, 'movies')

    def fetch_dubbed_movies():
        """Z√≠skanie dabovan√Ωch filmov s novou ≈°trukt√∫rou stream_audio"""
        dubbed_langs = {"CZE", "CSE", "SLK"}
        
        movies = mongo_api.get_items(
            "movies",
            query={
                "status": 1,
                "release_date": {"$exists": True},
                "stream_audio": {"$regex": "(CZE|CSE|SLK)", "$options": "i"}
            },
            sort={"release_date": -1},
            limit=100
        )
        
        filtered = []
        for movie in movies:
            audio_str = movie.get("stream_audio", "")
            if not audio_str:
                continue
                
            audio_codes = {code.strip().upper() for code in audio_str.split(",")}
            if audio_codes & dubbed_langs:
                filtered.append(movie)
        
        return filtered[:100]

    movies = redis_cache.get_or_cache("latest_dubbed_movies", fetch_dubbed_movies, ttl=600)

    for movie in movies:
        add_movie_listitem(movie, ADDON_HANDLE)

    xbmcplugin.endOfDirectory(ADDON_HANDLE)

def list_top_popular_movies_czsk():
    xbmcplugin.setPluginCategory(ADDON_HANDLE, 'Top 100 popul√°rnych filmov (CZ/SK)')
    xbmcplugin.setContent(ADDON_HANDLE, 'movies')

    def fetch_tmdb_popular_ids():
        popular_ids = []
        api_key = addon.getSetting("tmdb_api_key")

        for page in range(1, 6):
            url = f"https://api.themoviedb.org/3/movie/popular?api_key={api_key}&language=cs-CZ&region=CZ&page={page}"
            try:
                with urllib.request.urlopen(url, timeout=10) as response:
                    data = json.loads(response.read().decode('utf-8'))
                    for item in data.get("results", []):
                        popular_ids.append(item["id"])
            except Exception as e:
                xbmc.log(f"Chyba pri naƒç√≠tan√≠ popul√°rnych filmov z TMDb: {e}", xbmc.LOGWARNING)

        return popular_ids

    tmdb_ids = redis_cache.get_or_cache("tmdb_popular_czsk_ids", fetch_tmdb_popular_ids, ttl=21600)

    found_movies = []
    for tmdb_id in tmdb_ids:
        movie = mongo_api.get_item("movies", "tmdbId", tmdb_id)
        if movie and movie.get("status") == 1:
            found_movies.append(movie)
        if len(found_movies) >= 100:
            break

    for movie in found_movies:
        add_movie_listitem(movie, ADDON_HANDLE)

    xbmcplugin.endOfDirectory(ADDON_HANDLE)

def list_trending_movies_last_14_days():
    xbmcplugin.setPluginCategory(ADDON_HANDLE, 'Trending filmy (posledn√Ωch 14 dn√≠)')
    xbmcplugin.setContent(ADDON_HANDLE, 'movies')

    def fetch_trending_ids():
        trending_ids = set()
        api_key = addon.getSetting("tmdb_api_key")

        for period in ['day', 'week']:
            for i in range(1, 3):
                url = f"https://api.themoviedb.org/3/trending/movie/{period}?api_key={api_key}&page={i}"
                try:
                    with urllib.request.urlopen(url, timeout=10) as response:
                        data = json.loads(response.read().decode('utf-8'))
                        for item in data.get("results", []):
                            trending_ids.add(item["id"])
                except Exception as e:
                    xbc.log(f"Chyba pri naƒç√≠tan√≠ trending filmov ({period}): {e}", xbc.LOGWARNING)

        return list(trending_ids)

    tmdb_ids = redis_cache.get_or_cache("tmdb_trending_14days", fetch_trending_ids, ttl=21600)

    found_movies = []
    for tmdb_id in tmdb_ids:
        movie = mongo_api.get_item("movies", "tmdbId", tmdb_id)
        if movie and movie.get("status") == 1:
            found_movies.append(movie)
        if len(found_movies) >= 100:
            break

    for movie in found_movies:
        add_movie_listitem(movie, ADDON_HANDLE)

    xbmcplugin.endOfDirectory(ADDON_HANDLE)
    
def list_top_rated_movies_czsk():
    xbmcplugin.setPluginCategory(ADDON_HANDLE, 'Top 100 najlep≈°ie hodnoten√Ωch filmov (CZ/SK)')
    xbmcplugin.setContent(ADDON_HANDLE, 'movies')

    def fetch_top_rated_ids():
        top_rated_ids = []
        api_key = addon.getSetting("tmdb_api_key")

        for page in range(1, 6):
            url = f"https://api.themoviedb.org/3/movie/top_rated?api_key={api_key}&language=cs-CZ&region=CZ&page={page}"
            try:
                with request.urlopen(url, timeout=10) as response:
                    data = json.loads(response.read().decode('utf-8'))
                    for item in data.get("results", []):
                        top_rated_ids.append(item["id"])
            except Exception as e:
                xbmc.log(f"Chyba pri naƒç√≠tan√≠ top rated filmov z TMDb: {e}", xbmc.LOGWARNING)

        return top_rated_ids

    tmdb_ids = redis_cache.get_or_cache("tmdb_top_rated_czsk_ids", fetch_top_rated_ids, ttl=21600)

    found_movies = []
    for tmdb_id in tmdb_ids:
        movie = mongo_api.get_item("movies", "tmdbId", tmdb_id)
        if movie and movie.get("status") == 1:
            found_movies.append(movie)
        if len(found_movies) >= 100:
            break

    for movie in found_movies:
        add_movie_listitem(movie, ADDON_HANDLE)

    xbmcplugin.endOfDirectory(ADDON_HANDLE)

params = dict(parse_qsl(sys.argv[2][1:]))
action = params.get('action')

# Router - Main control flow
if action == 'select_stream':
    select_stream(params.get('movieId'))
elif action == 'select_stream_serie':
    select_stream_serie(params.get('episodeId'))
elif action == 'recent_searches':
    list_recent_searches()
elif action == 'recently_played':
    list_played_movies()
elif action == 'recently_played_series':
    list_played_series()
elif action == 'list_movies':
    page = int(params.get('page', '1'))
    query = params.get('query')
    show_movies(query=query, page=page)
elif action == 'show_movies':
    page = int(params.get('page', '1'))
    query = params.get('query')
    show_movies(query=query, page=page)
elif action == 'clear_search_history':
    if xbmcgui.Dialog().yesno("Potvrdenie", "Naozaj chce≈° vymaza≈• hist√≥riu hƒæadania?"):
        clear_search_history()
elif action == 'clear_played_history':
    if xbmcgui.Dialog().yesno("Potvrdenie", "Naozaj chce≈° vymaza≈• naposledy sledovan√©?"):
        clear_played_history()
elif action == 'list_series':
    page = int(params.get('page', '1'))
    list_series(page=page)
elif action == 'list_seasons':
    list_seasons(params.get('serieId'))
elif action == 'list_episodes':
    list_episodes(params.get('serieId'), params.get('seasonId'))
elif action == 'search':
    if 'query' in params:
        search_text = params['query']
        page = int(params.get('page', '1'))
        save_search_term(search_text)
        process_tmdb_search_results(search_text, page)
    else:
        search_movies()
elif action == 'search_results':
    if 'query' in params:
        search_text = params['query']
        page = int(params.get('page', '1'))
        process_tmdb_search_results(search_text, page)
elif action == 'show_latest_movies':
    page = int(params.get('page', '1'))
    show_latest_movies(page=page)
elif action == 'show_latest_added_movies':
    page = int(params.get('page', '1'))
    show_latest_added_movies(page=page)
elif action == 'list_latest_series':
    list_latest_series()
elif action == 'list_latest_added_series':
    page = int(params.get('page', '1'))
    list_latest_added_series(page=page)
elif action == 'typy_na_dnes_csfd':
    typy_na_dnes_csfd()
elif action == 'list_movies_by_name':
    list_movies_by_name(params.get('initial'), int(params.get('length', 1)))
elif action == 'list_series_by_name':
    list_series_by_name(params.get('initial'), int(params.get('length', 1)))
elif action == 'show_latest_dubbed_movies':
    show_latest_dubbed_movies()
elif action == 'show_movies_with_cz_audio':
    page = int(params.get('page', '1'))
    show_movies_with_cz_audio(page=page)
elif action == 'list_top_popular_movies_czsk':
    list_top_popular_movies_czsk()
elif action == 'list_trending_movies_last_14_days':
    list_trending_movies_last_14_days()
elif action == 'list_top_rated_movies_czsk':
    list_top_rated_movies_czsk()
elif action == 'add_watch_later':
    add_to_watch_later(params.get('type'), int(params.get('id')))
elif action == 'remove_watch_later':
    remove_from_watch_later(params.get('type'), int(params.get('id')))
elif action == 'list_watch_later':
    list_watch_later()
else:
    # Initial login and main menu
    main_menu()